У нас есть разные состояния меню.

Каждое состояние - это класс. У класса есть метод, который занимается генерацией комманд (пока это выглядит как фабрика). К примеру, когда нажимается клавиша ConfigurableDispatchingSystem перехватывает нажатие, определяет какой тип комманды соответствует этой клавише (использование, передвижение, открытие двери), создает событие которое содержит нажатую клавишу и определенный тип (если тип не может быть определен - используется тип UNRESOLVED) и всё это отправляется как сообщение UnprocessedKeyActionEvent всем.

Дальше ControllSystem перехватывает все UnprocessedKeyAction's и делегирует объекту типа State сгенерировать комманду: currentState->generateCommand(this, registry, dispatcher, UnprocessedKeyActionEvent);

Тот в свою очередь уже реализуется по разному. Если это состояние Normal, то реагирует одним способом. Если же это состояние Attack, то многие из клавиш игнорируются, а клавиши перемещения,к примеру, генерируют перемещение курсора, а не игрока.

Все действия отправляются с помощью специального метода CommandEvent и перехватываются CommandCollector'ом, который затем выполняет их все вместе.


На разные действия устанавливается разное штрафное время. Штрафное время определяет сколько существо не сможет больше ничего делать. Если атака стоит 10 очков, то когда игрок использует комманду атаки, в его штрафные очки добавляется 10 очков и когда GameCycleSystem обновляется, она 10 циклов на автомате обрабатывает ИИ - она берет каждое существо, если у существа нет штрафных очков, генерирует команду иначе пропускает.

С таким подходом, к примеру, мы можем получить скорость игрока. Если на нем тяжелые ботинки, то штраф ходьбы будет пусть 5 очков, тогда за каждое перемещение он будет терять 5 игровых циклов. Если он будет убегать от крысы, у которой штраф 1 (минимально возможный), то она будет приближаться на 4 клетки каждый ход, т.е доганять нас. Если мы переключимся в бег и штраф понизится до 2, то мы будем убегать быстрее, но все равно не убежим.

Если штраф 0 очков, то мы ничего делаем в ИИ.